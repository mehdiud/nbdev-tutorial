[
  {
    "objectID": "classification.html",
    "href": "classification.html",
    "title": "Classification",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()\n\n\nsource\n\n\nsay_hello\n\n say_hello (to)\n\nSay hello to somebody\n\nsay_hello('John')\n\n'Hello John!'\n\n\n\ndisplay(SVG('&lt;svg height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"&gt;&lt;circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"steelblue\"/&gt;&lt;/svg&gt;'))"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev-tutorial",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev-tutorial",
    "section": "Install",
    "text": "Install\npip install nbdev_tutorial"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev-tutorial",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "dataset_exploration.html",
    "href": "dataset_exploration.html",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "df.head()\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n\n\n\n\n\n\ndes = df.describe()\n\n\ndes\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nAge\nSibSp\nParch\nFare\n\n\n\n\ncount\n891.000000\n891.000000\n891.000000\n714.000000\n891.000000\n891.000000\n891.000000\n\n\nmean\n446.000000\n0.383838\n2.308642\n29.699118\n0.523008\n0.381594\n32.204208\n\n\nstd\n257.353842\n0.486592\n0.836071\n14.526497\n1.102743\n0.806057\n49.693429\n\n\nmin\n1.000000\n0.000000\n1.000000\n0.420000\n0.000000\n0.000000\n0.000000\n\n\n25%\n223.500000\n0.000000\n2.000000\n20.125000\n0.000000\n0.000000\n7.910400\n\n\n50%\n446.000000\n0.000000\n3.000000\n28.000000\n0.000000\n0.000000\n14.454200\n\n\n75%\n668.500000\n1.000000\n3.000000\n38.000000\n1.000000\n0.000000\n31.000000\n\n\nmax\n891.000000\n1.000000\n3.000000\n80.000000\n8.000000\n6.000000\n512.329200\n\n\n\n\n\n\n\n\nsource = data.stocks()\n\nalt.Chart(source).mark_area(\n    color=\"lightblue\",\n    interpolate='step-after',\n    line=True\n).encode(\n    x='date',\n    y='price'\n).transform_filter(alt.datum.symbol == 'GOOG')\n\n\n\n\n\n\n\nsource\n\n\n\n\n\n\n\n\nsymbol\ndate\nprice\n\n\n\n\n0\nMSFT\n2000-01-01\n39.81\n\n\n1\nMSFT\n2000-02-01\n36.35\n\n\n2\nMSFT\n2000-03-01\n43.22\n\n\n3\nMSFT\n2000-04-01\n28.37\n\n\n4\nMSFT\n2000-05-01\n25.45\n\n\n...\n...\n...\n...\n\n\n555\nAAPL\n2009-11-01\n199.91\n\n\n556\nAAPL\n2009-12-01\n210.73\n\n\n557\nAAPL\n2010-01-01\n192.06\n\n\n558\nAAPL\n2010-02-01\n204.62\n\n\n559\nAAPL\n2010-03-01\n223.02\n\n\n\n\n560 rows × 3 columns\n\n\n\n\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbrush = alt.selection(type='interval', resolve='global')\n\nbase = alt.Chart(source).mark_point().encode(\n    y='Miles_per_Gallon',\n    color=alt.condition(brush, 'Origin', alt.ColorValue('gray')),\n).add_selection(\n    brush\n).properties(\n    width=250,\n    height=250\n)\n\nbase.encode(x='Horsepower') | base.encode(x='Acceleration')\n\n\n\n\n\n\n\nsource\n\n\n\n MyViz ()\n\nThis class is used to create various visualizations via altair library\n\nsource\n\n\n\n\n MyViz.plot_stock (stock_ticker:str)\n\nGets stock ticker as parameter, returns a chart object.\n\nmyviz = MyViz()\nmyviz.plot_stock(\"GOOG\")\n\n\n\n\n\n\n\nmyviz.plot_stock(\"MSFT\")"
  },
  {
    "objectID": "dataset_exploration.html#load-the-dataset",
    "href": "dataset_exploration.html#load-the-dataset",
    "title": "Exploratory Data Analysis",
    "section": "",
    "text": "df.head()\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n\n\n\n\n\n\ndes = df.describe()\n\n\ndes\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nAge\nSibSp\nParch\nFare\n\n\n\n\ncount\n891.000000\n891.000000\n891.000000\n714.000000\n891.000000\n891.000000\n891.000000\n\n\nmean\n446.000000\n0.383838\n2.308642\n29.699118\n0.523008\n0.381594\n32.204208\n\n\nstd\n257.353842\n0.486592\n0.836071\n14.526497\n1.102743\n0.806057\n49.693429\n\n\nmin\n1.000000\n0.000000\n1.000000\n0.420000\n0.000000\n0.000000\n0.000000\n\n\n25%\n223.500000\n0.000000\n2.000000\n20.125000\n0.000000\n0.000000\n7.910400\n\n\n50%\n446.000000\n0.000000\n3.000000\n28.000000\n0.000000\n0.000000\n14.454200\n\n\n75%\n668.500000\n1.000000\n3.000000\n38.000000\n1.000000\n0.000000\n31.000000\n\n\nmax\n891.000000\n1.000000\n3.000000\n80.000000\n8.000000\n6.000000\n512.329200\n\n\n\n\n\n\n\n\nsource = data.stocks()\n\nalt.Chart(source).mark_area(\n    color=\"lightblue\",\n    interpolate='step-after',\n    line=True\n).encode(\n    x='date',\n    y='price'\n).transform_filter(alt.datum.symbol == 'GOOG')\n\n\n\n\n\n\n\nsource\n\n\n\n\n\n\n\n\nsymbol\ndate\nprice\n\n\n\n\n0\nMSFT\n2000-01-01\n39.81\n\n\n1\nMSFT\n2000-02-01\n36.35\n\n\n2\nMSFT\n2000-03-01\n43.22\n\n\n3\nMSFT\n2000-04-01\n28.37\n\n\n4\nMSFT\n2000-05-01\n25.45\n\n\n...\n...\n...\n...\n\n\n555\nAAPL\n2009-11-01\n199.91\n\n\n556\nAAPL\n2009-12-01\n210.73\n\n\n557\nAAPL\n2010-01-01\n192.06\n\n\n558\nAAPL\n2010-02-01\n204.62\n\n\n559\nAAPL\n2010-03-01\n223.02\n\n\n\n\n560 rows × 3 columns\n\n\n\n\nfrom vega_datasets import data\n\nsource = data.cars()\n\nbrush = alt.selection(type='interval', resolve='global')\n\nbase = alt.Chart(source).mark_point().encode(\n    y='Miles_per_Gallon',\n    color=alt.condition(brush, 'Origin', alt.ColorValue('gray')),\n).add_selection(\n    brush\n).properties(\n    width=250,\n    height=250\n)\n\nbase.encode(x='Horsepower') | base.encode(x='Acceleration')\n\n\n\n\n\n\n\nsource\n\n\n\n MyViz ()\n\nThis class is used to create various visualizations via altair library\n\nsource\n\n\n\n\n MyViz.plot_stock (stock_ticker:str)\n\nGets stock ticker as parameter, returns a chart object.\n\nmyviz = MyViz()\nmyviz.plot_stock(\"GOOG\")\n\n\n\n\n\n\n\nmyviz.plot_stock(\"MSFT\")"
  }
]